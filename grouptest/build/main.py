
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

import subprocess
from pathlib import Path
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage

import requests
from bs4 import BeautifulSoup
import pandas as pd
import concurrent.futures

from konlpy.tag import Okt
from collections import Counter
import matplotlib.pyplot as plt
from wordcloud import WordCloud


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\odpa0\OneDrive\바탕 화면\오픈소스 기초\grouptest\build\assets\frame2")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def run_search():
    window.destroy()  # 현재 GUI를 닫습니다.
    subprocess.Popen(['python', OUTPUT_PATH / 'search.py'])

def run_decade():
    window.destroy()  # 현재 GUI를 닫습니다.
    subprocess.Popen(['python', OUTPUT_PATH / 'decade.py'])

def run_keygraph():
    window.destroy()  # 현재 GUI를 닫습니다.
    subprocess.Popen(['python', OUTPUT_PATH / 'keygraph.py'])

def run_data():  
    subprocess.Popen(['python', OUTPUT_PATH / 'data.py'])



window = Tk()

window.geometry("1400x900")
window.configure(bg = "#FFFFFF")



canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 900,
    width = 1400,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    394.0,
    530.0,
    image=image_image_1
)

canvas.create_text(
    75.0,
    287.0,
    anchor="nw",
    text="Lyrics Crawling in\nMelon Musicplayer.",
    fill="#000000",
    font=("Inter Medium", 80 * -1)
)

canvas.create_text(
    75.0,
    484.0,
    anchor="nw",
    text="Select the menu.",
    fill="#FFFFFF",
    font=("Inter Medium", 80 * -1)
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))

button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    relief="flat",
    command=lambda: (print("button_1 clicked"), run_search())
)

button_1.place(
    x=70.0,
    y=58.0,
    width=140.0,
    height=29.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: (print("button_2 clicked"), run_data()),
    relief="flat"
)
button_2.place(
    x=208.0,
    y=58.0,
    width=140.0,
    height=29.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: (print("button_3 clicked"), run_decade()),
    relief="flat"
)
button_3.place(
    x=368.0,
    y=58.0,
    width=140.0,
    height=29.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: (print("button_3 clicked"), run_keygraph()),
    relief="flat"
)
button_4.place(
    x=550.0,
    y=58.0,
    width=161.0,
    height=29.0
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    387.0,
    72.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    1020.0,
    462.0,
    image=image_image_3
)


window.resizable(False, False)
window.mainloop()



# 크롤링 코드

# 멜론 TOP 100 차트 페이지 URL
url = 'https://www.melon.com/chart/index.htm'

# 웹 페이지 요청
headers = {'User-Agent': 'Mozilla/5.0'}
response = requests.get(url, headers=headers)

# BeautifulSoup 객체 생성
soup = BeautifulSoup(response.text, 'html.parser')

# 곡 ID, 제목, 아티스트 추출
song_ids = []
song_titles = []
song_artists = []

for song_tag in soup.find_all('tr', class_='lst50') + soup.find_all('tr', class_='lst100'):
    song_id = song_tag.get('data-song-no')
    if song_id:
        title_tag = song_tag.find('div', class_='rank01').find('a')
        artist_tag = song_tag.find('div', class_='rank02').find('a')
        song_ids.append(song_id)
        song_titles.append(title_tag.text)
        song_artists.append(artist_tag.text)

# 곡 가사 추출 함수
def get_lyrics(song_id):
    song_url = f'https://www.melon.com/song/detail.htm?songId={song_id}'
    song_response = requests.get(song_url, headers=headers)
    song_soup = BeautifulSoup(song_response.text, 'html.parser')
    lyrics_tag = song_soup.find('div', class_='lyric')
    if lyrics_tag:
        # <br> 태그를 줄바꿈으로 대체하여 텍스트 추출 및 ',' 제거
        lyrics = ""
        for line in lyrics_tag.stripped_strings:
            lyrics += line.replace(',', '') + "\n"
        return lyrics.strip()
    else:
        return ""

# 병렬 처리로 가사 추출
def fetch_lyrics(song_id):
    return song_id, get_lyrics(song_id)

# 병렬처리를 위해 ThreadPoolExecutor 사용
with concurrent.futures.ThreadPoolExecutor() as executor:
    results = list(executor.map(fetch_lyrics, song_ids))

# 결과 처리
lyrics_dict = dict(results)
lyrics_list = [lyrics_dict[song_id] for song_id in song_ids]

# 데이터프레임 생성
data = {'Song ID': song_ids, 'Title': song_titles, 'Artist': song_artists, 'Lyrics': lyrics_list}
df = pd.DataFrame(data)

# CSV 파일로 저장
df.to_csv('melon_top_100.csv', index=False, encoding='utf-8-sig')

print("CSV 파일이 저장되었습니다.")
