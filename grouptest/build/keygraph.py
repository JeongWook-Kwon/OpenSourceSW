
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

# 완료
#

from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage



from matplotlib import font_manager, rc

import os
import re
import matplotlib.pyplot as plt
from collections import defaultdict
import subprocess

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\odpa0\OneDrive\바탕 화면\오픈소스 기초\example\build\assets\frame0")

def run_data():  
    subprocess.Popen(['python', OUTPUT_PATH / 'data.py'])

def run_search():
    window.destroy()  # 현재 GUI를 닫습니다.
    subprocess.Popen(['python', OUTPUT_PATH / 'search.py'])

def run_decade():
    window.destroy()  # 현재 GUI를 닫습니다.
    subprocess.Popen(['python', OUTPUT_PATH / 'decade.py'])

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def graph():  # 키워드를 매개변수로 받도록 수정

    keyword = entry_1.get()  # 키워드 가져오기
    data_directory = "./decade_lyrics"

    # 각 년대별로 키워드가 사용된 곡 수를 저장할 딕셔너리
    decade_keyword_count = defaultdict(int)

    # 텍스트 파일들을 읽어들이고 키워드가 포함된 곡을 세기
    for filename in os.listdir(data_directory):
        if filename.endswith(".txt"):
            filepath = os.path.join(data_directory, filename)
            
            # 파일 이름에서 년도를 추출
            year = int(re.search(r'\d{4}', filename).group())
            decade = (year // 10) * 10
            
            with open(filepath, 'r', encoding='utf-8') as file:
                lyrics = file.read()
                
                # 'Title'을 기준으로 곡을 나누기
                songs = lyrics.split("Title")
                
                for song in songs:
                    if keyword in song:
                        decade_keyword_count[decade] += 1

    # 결과를 시각화
    decades = sorted(decade_keyword_count.keys())
    counts = [decade_keyword_count[decade] for decade in decades]

    # 한글 폰트 설정
    font_path = "C:/Windows/Fonts/malgun.ttf"  # 한글 폰트 경로 (맥OS나 리눅스 사용자는 해당 시스템에 맞는 경로 설정 필요)
    font_name = font_manager.FontProperties(fname=font_path).get_name()
    rc('font', family=font_name)

    # 그래프 설정
    plt.figure(figsize=(12, 6))
    bars = plt.bar(decades, counts, width=8, align='center', color='skyblue', edgecolor='black')

    # 제목 및 라벨 설정
    plt.xlabel('Decade', fontsize=14, fontweight='bold')
    plt.ylabel('Number of Songs with Keyword', fontsize=14, fontweight='bold')
    plt.title(f'Number of Songs with Keyword "{keyword}" by Decade', fontsize=16, fontweight='bold')
    plt.xticks(decades, fontsize=12)
    plt.yticks(range(0, max(counts) + 1, 1), fontsize=12)

    # 값 표시
    for bar in bars:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width() / 2.0, height, f'{height}', ha='center', va='bottom', fontsize=12, fontweight='bold')

    # 그리드 및 스타일 설정
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.tight_layout()

    # 그래프 보여주기
    plt.show()

window = Tk()

window.geometry("1400x900")
window.configure(bg = "#FFFFFF")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 900,
    width = 1400,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    701.0,
    330.5,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=476.0,
    y=300.0,
    width=450.0,
    height=59.0
)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    715.0,
    330.0,
    image=image_image_1
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: (print("button_1 clicked"), graph()),
    relief="flat"
)
button_1.place(
    x=445.0,
    y=426.0,
    width=541.0,
    height=88.0
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    701.0,
    156.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    716.0,
    69.0,
    image=image_image_3
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: (print("button_2 clicked"), run_search()),
    relief="flat"
)
button_2.place(
    x=394.02734375,
    y=55.0,
    width=140.4242401123047,
    height=29.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: (print("button_3 clicked"), run_data()),
    relief="flat"
)
button_3.place(
    x=523.41796875,
    y=55.0,
    width=140.4242401123047,
    height=29.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=lambda:(print("button_4 clicked"), run_decade()),
    relief="flat"
)
button_4.place(
    x=683.90283203125,
    y=55.0,
    width=140.4242401123047,
    height=29.0
)

button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_5 clicked"),
    relief="flat"
)
button_5.place(
    x=866.45458984375,
    y=54.0,
    width=161.48788452148438,
    height=29.0
)
window.resizable(False, False)
window.mainloop()
